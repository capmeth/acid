import test from '../utils/confine/validators.js'


export default
{
    'config': { test: test.object, default: {}, merge: true },
    'config.*': test.unset,
    'config.assetTypes': { test: test.object, default: {} },
    'config.assetTypes.*': test.object,
    'config.assetTypes.*.*': test.unset,
    'config.assetTypes.*.plural': test.string,
    'config.assetTypes.*.singular': test.string,
    'config.cobe': { test: test.arrayOrObject, default: [] },
    'config.cobe.*': test.object,
    'config.cobe.*.*': test.unset,
    'config.cobe.*.color': test.stringOrBoolean,
    'config.cobe.*.imports': test.object,
    'config.cobe.*.imports.*': { test: test.objectOrAny('names') },
    'config.cobe.*.imports.*.*': test.unset,
    'config.cobe.*.imports.*.default': test.string,
    'config.cobe.*.imports.*.names': test.regexOrArrayOrStringOrFunctionOrNull,
    'config.cobe.*.mode': test.cobeMode,
    'config.cobe.*.noHide': test.boolean,
    'config.cobe.*.noHighlight': test.boolean,
    'config.cobe.*.types': { test: test.arrayOrString, default: [] },
    'config.cobe.*.types.*': test.string,
    'config.cobe.*.use': test.arrayOrStringOrNull,
    'config.cobe.*.use.0': test.string,    
    'config.cobe.*.use.1': test.serial,
    'config.cobeSvelte': test.boolean,
    'config.components': { test: test.object, default: {}, merge: true },
    'config.components.*': test.stringOrNull,
    'config.configs': { test: test.arrayOrObjectOrStringOrFunction, default: [] },
    'config.configs.*': test.stringOrFunctionOrObject,
    'config.copy': { test: test.arrayOrObjectOrString, default: [] },
    'config.copy.*': test.objectOrString('files'),
    'config.copy.*.files': { test: test.objectOrArrayOrString('include'), default: {} },
    'config.copy.*.files.*': test.unset,
    'config.copy.*.files.include': { test: test.arrayOrString, default: [] },
    'config.copy.*.files.exclude': { test: test.arrayOrString, default: [] },
    'config.copy.*.to': test.functionOrArrayOrStringOrNull,
    'config.copy.*.to.*': test.unset,
    'config.copy.*.to.0': test.regexOrArrayOrString,
    'config.copy.*.to.1': test.stringOrFunction,  
    'config.finalizeAsset': test.functionOrNull,
    'config.hljs': { test: test.objectOrString('theme'), default: {}, merge: true },
    'config.hljs.*': test.unset,
    'config.hljs.aliases': { test: test.object, default: {}, merge: true },
    'config.hljs.aliases.*': test.arrayOrString,
    'config.hljs.aliases.*.*': test.string,
    'config.hljs.languages': { test: test.arrayOrString, default: [] },
    'config.hljs.languages.*': test.string,
    'config.hljs.theme': test.string,
    'config.hljs.version': test.string,
    'config.importMap': { test: test.object, default: {}, merge: true }, 
    'config.importMap.imports': { test: test.object, merge: true }, 
    'config.importMap.integrity': { test: test.object, merge: true }, 
    'config.importMap.scopes': { test: test.object, merge: true }, 
    'config.labels': { test: test.object, default: {}, merge: true },
    'config.labels.*': test.string,
    'config.links': { test: test.arrayOrObjectOrString, default: [] },
    'config.links.*': test.objectOrString('href', { rel: 'stylesheet' }),
    'config.logo': test.stringOrNull,
    'config.metas': { test: test.arrayOrObjectOrString, default: [] },
    'config.metas.*': test.stringOrObject,
    'config.namespace': test.alphanum,
    'config.noRecognition': test.boolean,
    'config.noticeTimeout': test.number,
    'config.output': { test: test.objectOrString('dir'), default: {}, merge: true },
    'config.output.*': test.unset,
    'config.output.dir': test.string,
    'config.output.name': test.string,
    'config.parsers': { test: test.arrayOrObject, default: [] },
    'config.parsers.*': test.object,
    'config.parsers.*.*': test.unset,
    'config.parsers.*.types': { test: test.arrayOrString, default: [] },
    'config.parsers.*.types.*': test.string,
    'config.parsers.*.use': test.arrayOrFunctionOrStringOrNull,
    'config.parsers.*.use.0': test.stringOrFunction,
    'config.parsers.*.use.1': test.serial,
    'config.refLinks': { test: test.arrayOrObjectOrString, default: [] },
    'config.refLinks.*': test.stringOrObject,
    'config.root': { default: process.cwd(), immutable: true },
    'config.rootSection': test.string,
    'config.scripts': { test: test.arrayOrObjectOrString, default: [] },
    'config.scripts.*': test.objectOrString('src'),
    'config.sections': { test: test.object, default: {} },
    'config.sections.*': { test: test.objectOrString('overview'), default: {} },
    'config.sections.*.components': { test: test.objectOrArrayOrString('include'), default: {} },
    'config.sections.*.components.*': test.unset,
    'config.sections.*.components.include': { test: test.arrayOrString, default: [] },
    'config.sections.*.components.exclude': { test: test.arrayOrString, default: [] },
    'config.sections.*.documents': { test: test.objectOrArrayOrString('include'), default: {} },
    'config.sections.*.documents.*': test.unset,
    'config.sections.*.documents.include': { test: test.arrayOrString, default: [] },
    'config.sections.*.documents.exclude': { test: test.arrayOrString, default: [] },
    'config.sections.*.overview': test.string,
    'config.sections.*.sections': { test: test.arrayOrString, default: [] },
    'config.sections.*.sections.*': test.string,
    'config.sections.*.title': test.string,
    'config.server': { test: test.objectOrBoolean('enabled'), default: {}, merge: true },
    'config.server.enabled': test.boolean,
    'config.server.port': test.portOrObjectOrNull,
    'config.socket': { test: test.objectOrNumber('port'), default: {}, merge: true },
    'config.socket.*': test.unset,
    'config.socket.port': test.portOrObjectOrNull,
    'config.socket.recoAttempts': test.zeroPlus,
    'config.socket.recoAttemptDelay': test.zeroPlus,
    'config.storage': test.storage,
    'config.style': { test: test.arrayOrString, default: [] },
    'config.style.*': test.string,
    'config.tagLegend': { test: test.object, default: {}, merge: true },
    'config.tagLegend.*': test.objectOrString('desc'),
    'config.tagLegend.*.*': test.unset,
    'config.tagLegend.*.assign': test.functionOrNull,
    'config.tagLegend.*.desc': test.string,
    'config.tagLegend.*.rank': test.zeroPlus,
    'config.title': test.stringOrNull,
    'config.tocDepth': h => h.and(h.number, h.gte(0), h.lte(6)) || h.err('must be a number between 0 and 6'),
    'config.toAssetAccessLine': 'config.toExampleFile',
    'config.toAssetId': 'config.toExampleFile',
    'config.toAssetName': 'config.toExampleFile',
    'config.toExampleFile': test.functionOrArrayOrStringOrNull,
    'config.toExampleFile.*': test.unset,
    'config.toExampleFile.0': test.regexOrArrayOrString,
    'config.toExampleFile.1': test.stringOrFunction,
    'config.updateMarkdown': { test: test.arrayOrObjectOrRegexOrStringWithFunctionOrNull, default: [] },
    'config.updateMarkdown.*': test.regexOrArrayOrObjectOrString,
    'config.updateMarkdown.*<plain>': test.object,
    'config.updateMarkdown.*<plain>.*': test.unset,
    'config.updateMarkdown.*<plain>.replace': test.stringOrFunction,
    'config.updateMarkdown.*<plain>.search': test.regexOrArrayOrString,
    'config.updateMarkdown.*<array>': test.array,
    'config.updateMarkdown.*<array>.*': test.unset,
    'config.updateMarkdown.*<array>.0': test.regexOrArrayOrString,
    'config.updateMarkdown.*<array>.1': test.stringOrFunction,
    'config.useFilenameOnly': test.boolean,
    'config.version': test.stringOrNull,
    'config.watch': { test: test.objectOrBoolean('enabled'), default: {}, merge: true },
    'config.watch.*': test.unset,
    'config.watch.enabled': test.boolean,
    'config.watch.delay': test.number,
    'config.watch.options': { test: test.objectOrAny('ignored'), default: {}, merge: true },
    'config.watch.paths': { test: test.arrayOrString, default: [] },
    'config.watch.paths.*': test.string,
}
