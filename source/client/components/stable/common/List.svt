<!--*
    Processes and filters a list of items.

    Nothing is rendered if `items` is nullish or of zero length.

    Props passed to **List**:
    - `items` *iterator* \
      Each subsequent element in the `items` array is transformed by `pred`. If 
      that transformation passes `filter` it will then be emitted by this 
      iterator.
    - `...unused` \
      all other unused props are passed

    @tags conditional, uses:main/List, extra-props:main/List

    @property { function } [filter=x => x !== void 0]
      Receives each transformed item. A falsey return value excludes the item.
    @property { array } items
      List of items to be iterated.
    @property { function } [pred]
      Processes each item.  The return value is evaluated by `filter`.
    @property { snippet } [use]
      Receives a snippet that renders the content of this component.
-->

<When test={items?.length} {use}>
  <List items={aiter(items, pred, filter)} {...args} />
</When>


<script module>
import { aiter, is } from '#utils'

import List from '#custom/main/List'
import When from './When'
</script>

<script>
let { filter, items, pred, use, ...args } = $props();
filter ||= item => !is.undef(item)
</script>
