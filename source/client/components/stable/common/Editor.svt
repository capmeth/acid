<!--*
    Code Block Editor (CoBE) component.
    
    Tightly coupled with **Code** and **Renbox** components for code editing 
    and component rendering, respectively.  Exactly one of each of these 
    components should appear as descendants for the trio to work properly.

    All other props are ignored if `id` is set, as this indicates a reference
    to indexed code block information extracted from a markdown file.

    Props passed to **Editor**:
    - `copied` *boolean* \
      Has code been copied to clipboard?
    - `copy` *function* \
      Copies current code to clipboard.  This function will not exist if copy 
      operation not supported by browser.
    - `edited` *boolean* \
      Is current code different from current render?
    - `error` *object* \
      Error thrown by current render.
    - `id` *string* \
      An id for the editor.
    - `isolate` *function* \
      Opens this code block on a page by itself.  This function will not exist 
      for some editor modes.
    - `isolated` *boolean* \
      Are we currently rendering in isolation?
    - `label` *string* \
      A label for the editor.
    - `lang` *string* \
      Language type of the code block.
    - `mode` *string* \
      Rendering mode for the editor.
    - `reset` *function* \
      Resets current code to original and renders.  This function will not 
      exist for some editor modes.
    - `shifted` *boolean* \
      Is current code different from original code?
    - `showing` *boolean* \
      Is code entry currently being shown?
    - `toggle` *function* \
      Toggles hide/show of **Code** component.  This function will not exist 
      for some editor modes.
    - `update` *function* \
      Renders current code.  This function will not exist for some editor 
      modes.

    @tags cobe, uses:main/Editor

    @property { boolean } [allowCss]
      Allow docsite CSS to leak into the render-box?
    @property { string } [code]
      Allow docsite CSS to leak into the render-box?
    @property { string } [id]
      Id of the code block to render.
    @property { string } [label]
      Descriptive label for the block.
    @property { string } [lang]
      Language type of the code block.
-->

<!--*
    Rendering mode for the code block.

    @prop mode
    @type { string }
    @values "demo", "edit", "live", "render", "static"
-->

<Editor 
  {id} 
  label={cbe.label} 
  {shifted} 
  {edited} 
  copied={editor.disabled} 
  {error} 
  showing={editor.code}
  {isolated}
  mode={cbe.mode} 
  lang={cbe.lang}

  {...funcs}

  {children}
/>


<script module>
import { onMount } from 'svelte'
import { noticeTimeout } from '#config'
import { binfo, compose, context, dom, toUrl } from '#frend/lib'

import Editor from '#custom/main/Editor'
</script>

<script>
let { id, children, ...args } = $props();

let cbe = id ? binfo(id) : binfo.make(args);
let isolated = window.name === id;

let editor = $state(
{ 
    allowCss: cbe.allowCss, 
    code: cbe.static || cbe.noHide || isolated,
    disabled: false, 
    lang: cbe.lang,
    noHighlight: cbe.noHighlight,
    readonly: cbe.static || cbe.demo,
    renbox: !cbe.static,
    value: cbe.code 
});

let error = $state(null);
// code input previous state
let prev = $state(null);
// has code changed?
let edited = $derived(prev !== editor.value);
// has code changed from original?
let shifted = $derived(cbe.code !== editor.value);
// functions to pass along
let funcs = $derived.by(() => 
{
    let fn = {};

    if (dom.clipboard.canCopy && editor.value) fn.copy = copy;
    if (cbe.edit || cbe.live) fn.reset = reset;
    if (!(cbe.render || cbe.static)) fn.toggle = toggle;
    if (cbe.edit) fn.update = update;
    if (id && cbe.edit || cbe.live) fn.isolate = isolate;

    return fn;
})

let copy = async () => 
{
    await dom.clipboard.copyTo(editor.value);
    editor.disabled = true;
    setTimeout(() => editor.disabled = false, noticeTimeout);
}
let reset = () => (editor.value = cbe.code, cbe.edit && update())
let toggle = () => editor.code = !editor.code
let update = () => 
{
    if (editor.display && edited)
    {
        error = null;
        compose(cbe.lang, prev = editor.value, editor.display).catch(onerror);
    }
}
let isolate = () => isolated ? window.close() : window.open(toUrl({ to: 'isolate', id }), id)

let onerror = err => (error = err.message ?? err, console.error('CoBE:', err))
editor.onkeydown = evt =>
{
    if (evt.metaKey)
    {
        switch (evt.keyCode)
        {            
            case 13: // enter key => render            
            case 83: // s key => render
              evt.preventDefault(); 
              update(); 
              break;            
            case 67: // c key => copy (if nothing selected)
              if (evt.target.selectionStart === evt.target.selectionEnd)
              {
                  evt.preventDefault();
                  copy(); 
              } 
              break;            
            case 82: // r key => reset
              evt.preventDefault();
              reset(); 
              break;
        }
    }
}

// auto update display for LIVE state
$effect(() => edited && cbe.live && update());
// make sure we do an initial render (if necessary)
onMount(() => !cbe.static && !cbe.live && update());

context.editor = editor;
</script>
