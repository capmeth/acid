<!--*
    Filters docsite assets.

    A `groups`, `sections`, or `tags` filter value can be
    - a comma delimited string, or
    - an array of string values, or
    - an object with values set as `true`.
 
    @property { snippet } children
      Receives each included (unfiltered) asset object.
    @property { boolean | null } [deprecated]
      Deprecation filter (filter assets by deprecation status).
    @property { string | array | object } [groups]
      Groups filter (filter assets by asset group).
    @property { string | array | object } [sections]
      Sections filter (filter assets by section owner).
    @property { boolean } [sort]
      Sort assets alphabetically by title?
    @property { string | array | object } [tags]
      Tag names filter (filter assets by included tags).
    @property { string | array | object } [text]
      Asset name filter (filter assets by name).
    @property { string } [type]
      Styling hint for the list.
    @property { snippet } [use]
      Receives a snippet that renders the content of this component.
      Also receives the full list of `assets` as a second parameter.
-->

<When test={true} {use} param={{ assets }}>
  <List items={assets} pred={ainfo} {type} {children} />
</When>


<script module>
import { ainfo } from '#frend/lib'
import stateFilters from '#frend/state/filters.svelte'

import List from './List'
import When from './When'
</script>

<script>
let { sort, type, use, children, ...filters } = $props();

let others = filters.store ? stateFilters(filters.store) : {};

let assets = $derived.by(() => 
{
    let items = ainfo.assets.filter(ainfo.filter({ ...others, ...filters }));
    return sort ? items.sort(ainfo.sort.title.asc) : items;
});
</script>
