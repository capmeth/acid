<!--*
    Renders a table-of-contents (ToC).

    Nothing is rendered unless there is at least one header element with an id
    within `tocDepth` range descending from the node identified by `sel`.

    @tags conditional, uses:main/Node

    @property { string } sel
      CSS selector identifying the root element in which to create a ToC from.
    @property { number } tocDepth
      ToC header depth (0-6).  Specify 0 for no ToC.
    @property { string } [type="toc"]
      Styling hint for internal lists.
    @property { snippet } [use]
      Receives a snippet that renders the content of this component.
-->

<When test={tree} {use}>
  {@render multi(tree.heads)}
</When>

{#snippet single({ id, title, heads })}
  <Node {id} {title} onclick={e => doClick(e, id)} />
  {@render multi(heads)}
{/snippet}

{#snippet multi(heads)}
  <List items={heads} {type}>
    {#snippet children(head)}
      {@render single(head)}
    {/snippet}
  </List>
{/snippet}


<script module>
import { headerTree } from '#frend/lib'

import List from './List'
import Node from '#custom/main/Node'
import When from './When'
</script>

<script>
let { sel, tocDepth, type = 'toc', use } = $props();
let tree = $state();

let doClick = (evt, id) =>
{
    document.getElementById(id)?.scrollIntoView();
    evt.preventDefault();
}

$effect(() => 
{
    let base = document.querySelector(sel);
    tree = base ? headerTree(base, tocDepth) : null;
});
</script>
