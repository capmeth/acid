<!--*
    Code Block Editor (CoBE) component.
    
    Tightly coupled with **Action**, **Code** and **Renbox** components for 
    user interaction, code editing, and component rendering, respectively.

    Exactly one of each of **Code** and **Renbox** should appear as 
    descendants, whereas **Action** components are clickable elements for 
    toggles and actions and can appear multiple times.

    All other props are ignored if `id` is set, as this indicates a reference
    to indexed code block information extracted from a markdown file.

    Props passed to **Editor**:
    - `copied` *boolean* \
      Has code been copied to clipboard?
    - `edited` *boolean* \
      Is current code different from current render?
    - `error` *object* \
      Error thrown by current render.
    - `id` *string* \
      An id for the editor.
    - `isolated` *boolean* \
      Are we currently rendering in isolation?
    - `label` *string* \
      A label for the editor.
    - `lang` *string* \
      Language type of the code block.
    - `mode` *string* \
      Rendering mode for the editor.
    - `shifted` *boolean* \
      Is current code different from original code?
    - `showing` *boolean* \
      Is code entry currently being shown?

    @tags cobe, uses:main/Editor

    @property { boolean } [allowCss]
      Allow docsite CSS to leak into the render-box?
    @property { string } [code]
      Allow docsite CSS to leak into the render-box?
    @property { string } [id]
      Id of the code block to render.
    @property { string } [label]
      Descriptive label for the block.
    @property { string } [lang]
      Language type of the code block.
-->

<!--*
    Rendering mode for the code block.

    @prop mode
    @type { string }
    @values "demo", "edit", "live", "render", "static"
-->

<Editor {id} {label} {lang} {mode} {shifted} {edited} {copied} {showing} {isolated} {error} />


<script module>
import { onMount } from 'svelte'
import { noticeTimeout } from '#config'
import { binfo, compose, context, dom, toUrl } from '#frend/lib'
import { is } from '#utils'

import Editor from '#custom/main/Editor'

let { canCopy, copyTo } = dom.clipboard;
</script>

<script>
let { id, ...args } = $props();

let { allowCss, label, lang, mode, noHighlight, ...cbe } = id ? binfo(id) : binfo.make(args);
let isolated = window.name === id;

let copy = async () => 
{
    await copyTo(editor.value);
    copied = true;
    setTimeout(() => copied = false, noticeTimeout);
}
let reset = () => shifted && (editor.value = cbe.code, cbe.edit && update())
let toggle = () => showing = !showing
let update = () => 
{
    if (editor.display && edited)
    {
        error = null;
        prev = editor.value;
        
        compose(lang, editor.value, editor.display)
            .catch(onerror);
    }
}
let isolate = () => isolated ? window.close() : window.open(toUrl({ to: 'isolate', id }), id)
let onerror = err => 
{
    error = err.message ?? err;
    console.error('CoBE:', err);
}

let onkeydown = evt =>
{
    if (evt.metaKey)
    {
        switch (evt.keyCode)
        {            
            case 13: // enter key => render            
            case 83: // s key => render
              evt.preventDefault(); 
              update(); 
              break;            
            case 67: // c key => copy (if nothing selected)
              if (evt.target.selectionStart === evt.target.selectionEnd)
              {
                  evt.preventDefault();
                  copy(); 
              } 
              break;            
            case 82: // r key => reset
              evt.preventDefault();
              reset(); 
              break;
        }
    }
}

let editor = $state(
{ 
    actions: 
    {
        copy: { action: copy },
        reset: { action: reset },
        toggle: { action: toggle },
        update: { action: update },
        isolate: { action: isolate },
    }, 
    code: 
    { 
        lang: noHighlight ? null : lang, 
        onkeydown, 
        readonly: cbe.static || cbe.demo 
    }, 
    picker:
    {
        render: cbe.color && (cbe.edit || cbe.live),
    },
    renbox: 
    {
        render: !cbe.static,
        allowCss 
    }, 
    color: is.string(cbe.color) ? cbe.color : cbe.color ? '#FFFFFF' : 'transparent',
    value: cbe.code 
});

let error = $state(null);
// code input previous state
let prev = $state(null);
// was copy-to-clipboard recently executed?
let copied = $state(false);
// is code pane currently displayed?
let showing = $state(cbe.static || cbe.noHide || isolated);
// has code changed?
let edited = $derived(prev !== editor.value);
// has code changed from original?
let shifted = $derived(cbe.code !== editor.value);

// update children via context
$effect(() => 
{
    editor.code.render = showing;
    editor.code.disabled = copied;

    let { actions } = editor;

    actions.copy.render = canCopy && editor.value;
    actions.copy.disabled = copied;
    actions.copy.on = copied;

    actions.reset.render = cbe.edit || cbe.live;
    actions.reset.disabled = !shifted;    
    
    actions.toggle.render = !(cbe.render || cbe.static);
    actions.toggle.disabled = false;    
    actions.toggle.on = showing;
    
    actions.update.render = cbe.edit;
    actions.update.disabled = !edited;    
    
    actions.isolate.render = id && cbe.edit || cbe.live;
    actions.isolate.disabled = false;
    actions.isolate.on = isolated;
});
// auto update display for LIVE state
$effect(() => edited && cbe.live && update());
// make sure we do an initial render (if necessary)
onMount(() => !cbe.static && !cbe.live && update());

context.editor = editor;
</script>
