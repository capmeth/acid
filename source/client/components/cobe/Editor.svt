<!--*
    Code Block Editor (CoBE) component.
    
    A workbench for component code editing and rendering.

    @tags group:cobe
    @property { string } [id]
      Id of the code block to render.
    @property { string } [lang]
      Language type of the code block.
-->

<!--*
    @prop mode
    @description Rendering mode for CoBE.
    @type { string }
    @values edit, live, render, static
-->

<div 
  {id} 
  class="cobe-editor mode-{cbe.mode} lang-{cbe.lang}"
  class:labeled={label}
  class:shifted
  class:edited
  class:showing
  class:copied
  class:failed={error}
>
  {#if label}
    <div class="label">{ label }</div>
  {/if}
  {#if !cbe.static && cbe.use}
    <div class="stage">
      <Renbox bind:display renbox={!allowCss} />
      {#if error}
        <div class="error-message">
          <Label id="label-error" /> { error }
        </div>
      {/if}
    </div>
  {/if}
  {#if !cbe.render}
    <div class="controls">
      <Button action={copied ? 'copied' : 'copy'} disabled={!copiable} onclick={copy} />
      {#if cbe.use && !cbe.static}
        <Button action={showing ? 'hide' : 'show'} onclick={toggle} />
        {#if cbe.use && !cbe.demo}
          {#if cbe.edit}
            <Button action="update" disabled={!edited} onclick={update} />
          {/if}
          <Button action="reset" disabled={!shifted} onclick={reset} />
        {/if}
      {/if}
    </div>
    {#if showing}
      <div class="entry hljs">
        <Code 
          bind:code={current} 
          lang={cbe.lang} 
          disabled={copied} 
          {editable} 
          noHighlight={cbe.noHighlight} 
          {onkeydown}
        >
          <div class="copied">
            <Label id="msg-copied" />
          </div>
        </Code>
      </div>
    {/if}
  {/if}
</div>


<script module>
import { onMount } from 'svelte'
import { cobe } from '#config'
import { context, dom, sinfo } from '#frend/lib'
import { ids } from '#frend/lib/code-blocks'

import Button from '../element/Button'
import Code from './Code'
import Label from '../element/Label'
import Renbox from './Renbox'

let contextMode = () =>
{
    if (context.asset) return sinfo.asset(context.asset).cobeMode;
    if (context.section) return sinfo(context.section).cobeMode;
}

let setup = (mode, lang) => 
{
    let data = { ...cobe['*'], ...cobe[lang] };

    data.lang = lang;
    // when rendering function is available behavior mode can be set
    // 1) locally (on info-string of code block)
    // 2) contextually (provided by document front-matter)
    // 3) linguistically (from spec for current code language)
    // 4) globally (from star spec configuration)
    // otherwise, static mode is in effect
    data.mode = data.use && (mode || contextMode() || data.mode) || 'static';

    data[data.mode] = true;

    return data;
}
</script>

<script>
let { id, ...args } = $props();
let { allowCss, code, label, lang, mode } = { ...ids[id], ...args };

code = code.trim();

let { compose } = context;

let cbe = $state(setup(mode, lang || 'default'));
let error = $state(null);
// for element bindings
let display = $state();
let copied = $state(false);
let copiable = $derived(dom.clipboard.canCopy && current && !copied);
let editable = $derived(cbe.use && !cbe.static && !cbe.demo);
// code display state w/toggle
let showing = $state(cbe.static || cbe.noHide);
// code input current and previous state
let current = $state(code), prev = $state(null);
 // has code changed?
let edited = $derived(prev !== current);
// has code changed from original?
let shifted = $derived(code !== current);

let reset = () => (current = code, cbe.edit && update())
let toggle = () => showing = !showing
let copy = () => (dom.clipboard.copyTo(current), copied = true, setTimeout(() => copied = false, 2000))
let handleError = err => (error = err.message ?? err, console.error(err))
let update = () => 
{
    if (display && edited)
    {
        error = null;
        compose(cbe.lang, prev = current, display).catch(handleError);
    }
}
let onkeydown = evt =>
{
    if (evt.metaKey)
    {
        switch (evt.keyCode)
        {
            // enter key => render
            case 13: 
            // s key => render
            case 83:
              evt.preventDefault(); 
              update(); 
              break;
            // c key => copy if nothing selected
            case 67: 
              if (evt.target.selectionStart === evt.target.selectionEnd)
              {
                  evt.preventDefault();
                  copy(); 
              } 
              break;
            // r key => reset
            case 82: 
              evt.preventDefault();
              reset(); 
              break;
        }
    }
}
// auto update display for LIVE state
$effect(() => cbe.live && update());
// make sure we do an initial render (if necessary)
onMount(() => !cbe.static && !cbe.live && update());
</script>
