<!--*
    Filters assets by name, tag, and group.

    @tags uses:main/Filters, uses:main/Tag

    @property { function } onfilter
      Called with filtering data when filters change.
    @property { boolean } [noTags]
      Turn off tag filtering?
    @property { boolean } [noText]
      Turn off text filtering?
-->

<Filters {clearFilters}>
  {#snippet groupFilter(type)}
    <List items={sinfo.groups} {type}>
      {#snippet children(group)}
        <Toggle bind:active={groups[group]} hint="checkbox">
          { t(`label_${group}`) }
        </Toggle>
      {/snippet}
    </List>
  {/snippet}
  {#snippet tagFilter(type)}
    <List items={tagnames} pred={tagDetails} {type}>
      {#snippet children({ name, info, desc })}
        <Toggle bind:active={tags[name]} hint="checkbox">
          <Tag {name} {info} {desc} /> 
        </Toggle>
      {/snippet}
    </List>
  {/snippet}
  {#snippet textFilter(hint)}
    <Input bind:value={text} {hint} placeholder={t.msg_filter_name} />
  {/snippet}
</Filters>


<script module>
import { sinfo, storage, tagDetails } from '#frend/lib'
import { tagLegend } from '#config'

import Filters from '#custom/main/Filters'
import Input from '#shared/helper/Input'
import List from '../../shared/common/List'
import Tag from '#custom/main/Tag'
import Toggle from '#shared/helper/Toggle'

let tagnames = Object.keys(tagLegend);

// convert filter data into bindable data
let toBinder = data =>
{
    let { groups, tags, ...other } = data || {};
    let binder = { ...other };

    if (groups) binder.groups = groups.reduce((o, g) => ({ ...o, [g]: true }), {});
    if (tags) binder.tags = tags.reduce((o, t) => ({ ...o, [t]: true }), {});

    return binder;
}

// convert bindable data into filter data
let toFilter = data =>
{
    let { groups, tags, ...other } = data || {};
    let filter = { ...other };

    if (groups) filter.groups = Object.keys(groups).filter(name => groups[name]);
    if (tags) filter.tags = Object.keys(tags).filter(name => tags[name]);

    return filter;
}
</script>

<script>
let { onfilter, store } = $props();

if (store) store = `filters-${store}`;

let stored = toBinder(storage[store]);
// initial filter options
let text = $state(stored.text || '');
let tags = $state(stored.tags || {}); 
let groups = $state(stored.groups || {});

let clearFilters = () => (text = '', tags = {}, groups = {})

$effect(() => onfilter(storage[store] = toFilter({ groups, tags, text })));
</script>
