<!--*
    Renders UI for converted markdown content.

    An `id` should be provided if ToC generation is needed.

    Prop `type` can be
    - `article` for document content
    - `component` for component descriptions
    - `prop` for component prop descriptions

    @tags inject:#main-markup, custom:main/Markup

    @property { snippet } children
      HTML content.
    @property { string } [el="div"]
      HTML tagname to render as container.
    @property { boolean } empty
      Is there no child content available?
    @property { string } id
      HTML id for root element.
    @property { string } type
      Type of markup being rendered.
-->

<svelte:element this={el} {id} class="main-markup type-{type}">
  {#if empty}
    <p class="empty">
      { t(`msg_no_${type}_description`) }
    </p>    
  {:else}
    {@render children()}
  {/if}
</svelte:element>


<script>
let { el = 'div', empty, id, type, children } = $props();
</script>

<style>
/* @inject #main-markup */
</style>
