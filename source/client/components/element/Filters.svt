<!--*
    Filters assets by name, tag, and group.

    @tags group:element, region
    @property { function } onfilter
      Called with filtering data when filters change.
    @property { boolean } [noTags]
      Turn off tag filtering?
    @property { boolean } [noText]
      Turn off text filtering?
-->

<div class="element-filters region-{ctx.region}">
  {#if !noText}
    <div class="filter text">
      <Input bind:value={text} placeholder={t('filter-name')} />
    </div>
  {/if}
  <div class="filter groups">
    <List items={assetGroups}>
      {#snippet children(group)}
        <Toggle bind:active={groups[group]} role="checkbox">
          <Label id="label-{group}" />
        </Toggle>
      {/snippet}
    </List>
  </div>
  {#if !noTags && tagnames.length}
    <div class="filter tags">
      <List items={tagnames} pred={tagDetails}>
        {#snippet children({ name, info, desc })}
          <Toggle bind:active={tags[name]} role="checkbox">
            <Tag {name} {info} {desc} /> 
          </Toggle>
        {/snippet}
      </List>
    </div>
  {/if}
</div> 


<script module>
import { storage, t, tagDetails } from '#frend/lib'
import { assetGroups, tagLegend } from '#config'

import Input from './Input';
import Label from './Label'
import List from './List'
import Tag from './Tag'
import Toggle from './Toggle'

let tagnames = Object.keys(tagLegend);

// convert filter data into bindable data
let toBinder = data =>
{
    let { groups, tags, ...other } = data || {};
    let binder = { ...other };

    if (groups) binder.groups = groups.reduce((o, g) => ({ ...o, [g]: true }), {});
    if (tags) binder.tags = tags.reduce((o, t) => ({ ...o, [t]: true }), {});

    return binder;
}

// convert bindable data into filter data
let toFilter = data =>
{
    let { groups, tags, ...other } = data || {};
    let filter = { ...other };

    if (groups) filter.groups = Object.keys(groups).filter(name => groups[name]);
    if (tags) filter.tags = Object.keys(tags).filter(name => tags[name]);

    return filter;
}
</script>

<script>
let { noTags, onfilter, noText, store } = $props();

let stored = toBinder(storage[store]);
// initial filter options
let text = $state(!noText && stored.text || '');
let tags = $state(!noTags && stored.tags || {}); 
let groups = $state(stored.groups || {});

$effect(() => onfilter(storage[store] = toFilter({ groups, tags, text })));
</script>
