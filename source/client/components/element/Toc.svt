<!--*
    Renders a table-of-contents (ToC).

    @tags group:element

    @property { function } [content]
      Receives the snippet to render ToC content.
    @property { string } sel
      Selector of the root element in which to create a ToC from.
    @property { number } tocDepth
      ToC header depth (0-6).  Specify 0 for no ToC.
-->

{#if tree}
  {#if content}
    {@render content(render)}
  {:else}
    {@render render()}
  {/if}
{/if}

{#snippet render()}
  <div class="element-toc">
    {@render multi(tree.heads)}  
  </div>  
{/snippet}

{#snippet single({ id, title, heads })}
  {#if id}
    <Link title="Scroll to {title}" onclick={e => doClick(e, id)}>
      { title }
    </Link>
  {:else}
    <span>{ title }</span>
  {/if}
  {@render multi(heads)}
{/snippet}

{#snippet multi(heads)}
  <List items={heads}>
    {#snippet children(head)}
      {@render single(head)}
    {/snippet}
  </List>
{/snippet}


<script module>
import { headerTree } from '#frend/lib'

import Link from '../app/Link'
import List from './List'
</script>

<script>
let { content, sel, tocDepth } = $props();
let tree = $state();

// Somehow this component's rendering screws with the context.
// Context must be reset here or it will be wrong in child components.
ctx.region = ctx.region;

let doClick = (evt, id) =>
{
    document.getElementById(id)?.scrollIntoView();
    evt.preventDefault();
}

$effect(() => 
{
    let base = document.querySelector(sel);
    tree = base ? headerTree(base, tocDepth) : null;
});
</script>
